name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Validate .env file
      - name: Validate .env file
        run: |
          if [ ! -f .env ]; then
            echo "Error: .env file is missing!"
            exit 1
          fi
          echo ".env file exists and is valid."

      # Step 4: Validate docker-compose.yaml file
      - name: Validate docker-compose.yaml
        run: |
          if ! docker-compose config; then
            echo "Error: docker-compose.yaml is invalid!"
            exit 1
          fi
          echo "docker-compose.yaml is valid."

      # Step 5: Install yamllint
      - name: Install yamllint
        run: |
          sudo apt update
          sudo apt install -y yamllint

      # Step 6: Create .yamllint configuration file
      - name: Create .yamllint configuration
        run: |
          cat <<EOL > .yamllint
          extends: default
          rules:
            line-length: disable
            document-start: disable
          EOL

      # Step 7: Lint docker-compose.yaml with custom .yamllint configuration
      - name: Lint docker-compose.yaml
        run: |
          yamllint -c .yamllint docker-compose.yaml

  deploy:
    needs: ci  # Deploy only if CI passes
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 3: Write private key to a file
      - name: Write private key to file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/lowcode.pem
          chmod 600 ~/.ssh/lowcode.pem

      # Step 4: Debug SSH Key
      - name: Debug SSH Key
        run: |
          echo "SSH Key:"
          cat ~/.ssh/lowcode.pem

      # Step 5: Test SSH Connection
      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com "echo 'SSH connection successful!'"

      # Step 6: Create the directory on EC2
      - name: Create directory on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com "mkdir -p ~/my-app"

      # Step 7: Copy files to EC2
      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem docker-compose.yaml .env *.tar.gz ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com:~/my-app/

      # Step 8: Log in to Docker Hub on EC2 (if using private images)
      - name: Log in to Docker Hub on EC2
        run: |
          echo "Logging in to Docker Hub..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com "echo '${{ secrets.DOCKER_HUB_TOKEN }}' | docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' --password-stdin"

      # Step 9: Deploy to EC2
      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com "cd ~/my-app && docker-compose up -d"

      # Step 10: Install Node.js and Budibase CLI on EC2
      - name: Install Node.js and Budibase CLI on EC2
        run: |
          echo "Installing Node.js and Budibase CLI..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com << 'EOF'
          curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g @budibase/cli
          EOF

      # Step 11: Import the Budibase app
      - name: Import Budibase app
        run: |
          echo "Importing Budibase app..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/lowcode.pem ubuntu@ec2-54-74-97-194.eu-west-1.compute.amazonaws.com "cd ~/my-app && budi apps --import *.tar.gz"

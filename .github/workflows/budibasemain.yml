name: Deploy Budibase App

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_TAR: "Change Request-export-1742513993388.tar.gz"
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup environment
      run: |
        # Create .env from .env.test if missing
        [ -f .env.test ] && cp .env.test .env || {
          echo "MAIN_PORT=10000" > .env
          echo "COUCH_DB_USER=admin" >> .env
          echo "COUCH_DB_PASSWORD=password" >> .env
          echo "BB_ADMIN_USER_EMAIL=admin@example.com" >> .env
          echo "BB_ADMIN_USER_PASSWORD=admin123" >> .env
          echo "PLUGINS_DIR=/plugins" >> .env
        }

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Start services
      run: |
        docker-compose up -d
        sleep 30  # Initial wait

    - name: Initialize CouchDB
      run: |
        # Wait for CouchDB to be ready
        timeout 180 bash -c 'until curl -s http://$COUCH_DB_USER:$COUCH_DB_PASSWORD@localhost:5984 >/dev/null; do
          echo "Waiting for CouchDB..."
          docker-compose logs couchdb-service --tail=10
          sleep 10
        done'
        
        # Create system databases with retries
        for db in _users _replicator; do
          echo "Creating $db database..."
          for i in {1..3}; do
            curl -X PUT http://$COUCH_DB_USER:$COUCH_DB_PASSWORD@localhost:5984/$db && break || sleep 5
          done
        done

    - name: Verify services
      run: |
        # Check all critical services
        for port in 10000 4002 4003; do
          timeout 30 bash -c 'until nc -z localhost '$port'; do sleep 2; done' || {
            docker-compose logs
            exit 1
          }
        done

    - name: Import application
      run: |
        # Get admin token with retries
        for i in {1..3}; do
          TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"email":"'$BB_ADMIN_USER_EMAIL'","password":"'$BB_ADMIN_USER_PASSWORD'"}' \
            http://localhost:10000/api/global/auth/login | jq -r '.token') && break || sleep 10
        done
        
        [ -z "$TOKEN" ] && { echo "Failed to get auth token"; exit 1; }
        
        # Import the app
        curl -v -X POST \
          -H "Authorization: Bearer $TOKEN" \
          -F "file=@$APP_TAR" \
          http://localhost:10000/api/builder/import || {
            docker-compose logs
            exit 1
          }

    - name: Final verification
      run: |
        curl -s http://localhost:10000/api/health | grep -q "OK" || {
          docker-compose logs
          exit 1
        }
        echo "Deployment successful!"

    - name: Cleanup on failure
      if: failure()
      run: |
        docker-compose logs --no-color > logs.txt
        echo "::group::Container Logs"
        cat logs.txt
        echo "::endgroup::"
        exit 1

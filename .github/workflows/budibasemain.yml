name: Budibase CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_PORT: 4002
  WORKER_PORT: 4003
  MINIO_PORT: 4004
  COUCH_DB_PORT: 4005
  REDIS_PORT: 6379
  WATCHTOWER_PORT: 6161
  BUDIBASE_ENVIRONMENT: DEVELOPMENT
  MAIN_PORT: 10000
  COUCHDB_CLUSTER_SIZE: 1  # Force single-node mode

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate configuration
        run: |
          [ -f docker-compose.yaml ] || { echo "Missing docker-compose.yaml"; exit 1; }
          [ -f .env ] || { echo "Missing .env file"; exit 1; }

  test:
    needs: validate
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -p 9001:9001 \
            -e "MINIO_ROOT_USER=minio" \
            -e "MINIO_ROOT_PASSWORD=miniosecret" \
            minio/minio server /data --console-address ":9001"
          sleep 10

      - name: Create test environment
        run: |
          cp .env .env.test
          echo "BB_ADMIN_USER_EMAIL=admin@example.com" >> .env.test
          echo "BB_ADMIN_USER_PASSWORD=adminpassword" >> .env.test
          echo "PLUGINS_DIR=/plugins" >> .env.test
          echo "MINIO_ROOT_USER=minio" >> .env.test
          echo "MINIO_ROOT_PASSWORD=miniosecret" >> .env.test
          echo "COUCHDB_CLUSTER_SIZE=1" >> .env.test  # Ensure single-node mode

      - name: Launch Budibase stack
        run: |
          docker-compose -f docker-compose.yaml --env-file .env.test up -d
          echo "Waiting for services to initialize..."
          sleep 30  # Initial wait reduced since we'll check specifically

      - name: Initialize CouchDB
        run: |
          # Wait for CouchDB to be ready
          echo "Waiting for CouchDB to be ready..."
          until curl -s http://localhost:$COUCH_DB_PORT >/dev/null; do
            sleep 5
          done

          # Create system databases
          echo "Creating CouchDB system databases..."
          curl -X PUT http://localhost:$COUCH_DB_PORT/_users
          curl -X PUT http://localhost:$COUCH_DB_PORT/_replicator
          curl -X PUT http://localhost:$COUCH_DB_PORT/_global_changes

          # Verify databases were created
          curl -s http://localhost:$COUCH_DB_PORT/_all_dbs | grep -q '_users' || { echo "Failed to create _users database"; exit 1; }
          sleep 10  # Additional wait for complete initialization

      - name: Verify service health
        run: |
          # Check CouchDB
          if ! curl -s http://localhost:$COUCH_DB_PORT | grep -q couchdb; then
            echo "CouchDB health check failed"
            docker-compose -f docker-compose.yaml logs couchdb
            exit 1
          fi

          # Check main Budibase health endpoint
          if curl -s http://localhost:$MAIN_PORT/api/health | grep -q "OK" || \
             curl -sIf http://localhost:$MAIN_PORT | grep -q "200"; then
            echo "Health check passed"
          else
            echo "Health check failed"
            docker-compose -f docker-compose.yaml logs
            exit 1
          fi

      - name: Clean up
        if: always()
        run: |
          docker-compose -f docker-compose.yaml down
          docker stop minio || true
          docker rm minio || true
